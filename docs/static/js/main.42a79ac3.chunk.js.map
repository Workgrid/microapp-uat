{"version":3,"sources":["components/Tests.js","pages/Summary.js","pages/IFrameDetail.js","pages/TestDetail.js","App.js","index.js"],"names":["testTypes","name","inDetail","microapp","panel","useState","map","testType","inSummary","loading","result","tests","setTests","testActions","useRef","useEffect","current","Token","testToken","Title","testTitle","Show","testShow","Hide","testHide","updateTest","update","prevTests","test","setTimeout","a","getToken","token","process","decodedToken","decode","aud","console","warn","updateTitle","Math","floor","random","showDetail","url","window","location","origin","pathname","hideDetail","filter","className","key","aria-label","role","onClick","testName","Summary","MicroApp","initialize","version","Tests","htmlFor","type","placeholder","detailPage","title","Detail","id","audience","currentCount","setCurrentCount","iframeUrl","setIframeUrl","countdownTimer","setInterval","prev","clearInterval","style","width","borderWidth","src","href","target","rel","App","basename","path","exact","component","TestDetail","IFrameDetail","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42a79ac3.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { decode } from 'jsonwebtoken'\n\nconst testTypes = [{ name: 'Token' }, { name: 'Title' }, { name: 'Show', inDetail: false }, { name: 'Hide' }]\n\nexport default ({ microapp, panel = 'summary' }) => {\n  const [tests, setTests] = useState(\n    testTypes.map(testType => ({ inSummary: true, inDetail: true, loading: false, result: false, ...testType }))\n  )\n  const testActions = useRef({})\n\n  useEffect(() => {\n    testActions.current.Token = testToken\n    testActions.current.Title = testTitle\n    testActions.current.Show = testShow\n    testActions.current.Hide = testHide\n  })\n\n  const runTest = testName => () => {\n    testActions.current[testName]()\n  }\n\n  const updateTest = (name, update) => {\n    setTests(prevTests => {\n      return prevTests.map(test => {\n        if (test.name === name) {\n          return { ...test, ...update }\n        } else {\n          return test\n        }\n      })\n    })\n  }\n\n  const testToken = () => {\n    if (!microapp) return\n\n    updateTest('Token', { loading: true, result: false })\n    // Arbitrarily add a \"loading time\" other wise you are kind of \"did it work?\"\n    setTimeout(async () => {\n      const token = await microapp.getToken()\n      // This would be done on a server side, notice how I'm not verifying the token\n      const decodedToken = decode(token)\n      // TODO alter this verification when this app is upgraded to the more secure token\n      if (decodedToken.aud === process.env.REACT_APP_AUD) {\n        updateTest('Token', { loading: false, result: true })\n      } else {\n        updateTest('Token', { loading: false, result: false })\n        console.warn(`Invalid token: ${decodedToken.aud} !== ${process.env.REACT_APP_AUD}`)\n      }\n    }, 500)\n  }\n\n  const testTitle = () => {\n    updateTest('Title', { result: false })\n    microapp.updateTitle(`Title Change: ${Math.floor(Math.random() * 500)}`)\n    updateTest('Title', { result: true })\n  }\n\n  const testShow = () => {\n    updateTest('Show', { result: false })\n    microapp.showDetail({ url: `${window.location.origin}${window.location.pathname}#/tests` })\n    updateTest('Show', { result: true })\n  }\n\n  const testHide = () => {\n    updateTest('Hide', { result: false })\n    microapp.hideDetail()\n    updateTest('Hide', { result: true })\n  }\n\n  return (\n    <>\n      <strong>Tests:</strong>\n      {tests\n        .filter(test => (panel === 'summary' && test.inSummary) || (panel === 'detail' && test.inDetail))\n        .map(test => (\n          <div className=\"checklist\" key={test.name}>\n            {test.loading ? (\n              <span aria-label=\"loading\" role=\"img\" className=\"pass\">\n                🤔\n              </span>\n            ) : (\n              <>\n                {test.result ? (\n                  <span aria-label=\"pass\" role=\"img\" className=\"pass\">\n                    ✅\n                  </span>\n                ) : (\n                  <span aria-label=\"fail\" role=\"img\" className=\"pass\">\n                    ❌\n                  </span>\n                )}\n              </>\n            )}\n            <div className=\"item\">{test.name}</div>\n            <div className=\"item\">\n              <button className=\"action-small\" onClick={runTest(test.name)}>\n                Run\n              </button>\n            </div>\n          </div>\n        ))}\n    </>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport Tests from '../components/Tests'\nimport MicroApp from '@workgrid/micro-app'\nimport './summary.css'\nimport { version } from '../../package.json'\n\nconst Summary = () => {\n  const microapp = useRef(new MicroApp({}))\n\n  useEffect(() => {\n    microapp.current.initialize()\n  }, [])\n\n  const showDetail = detailPage => {\n    // We have to use the hash router to show detail due to Github pages limitations\n    microapp.current.showDetail({\n      url: `${window.location.origin}${window.location.pathname}#/${detailPage}`,\n      title: 'UAT Microapp Detail'\n    })\n  }\n\n  return (\n    <div>\n      <h1>UAT Microapp</h1>\n      <p>This is the \"UAT\" microapp. v{version}</p>\n      <section className=\"section\">\n        <Tests microapp={microapp.current} panel=\"summary\" />\n        <label htmlFor=\"test-input\">Test Input</label>\n        <input type=\"text\" placeholder=\"Input Test\" name=\"test-input\" />\n      </section>\n      <div className=\"action-block vertical\">\n        <button className=\"primary\" onClick={() => showDetail('iframe')}>\n          iFrame Tests\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Summary\n","import React, { useRef, useEffect, useState } from 'react'\nimport MicroApp from '@workgrid/micro-app'\nimport './detail.css'\n\nconst Detail = () => {\n  const microapp = useRef(\n    new MicroApp({\n      id: 'uat-microapp',\n      audience: 'uat-microapp'\n    })\n  )\n\n  const [currentCount, setCurrentCount] = useState(3)\n  const [iframeUrl, setIframeUrl] = useState('')\n  const countdownTimer = useRef()\n\n  useEffect(() => {\n    microapp.current.initialize()\n    countdownTimer.current = setInterval(() => {\n      setCurrentCount(prev => {\n        return prev - 1\n      })\n    }, 1000)\n  }, [])\n\n  useEffect(() => {\n    if (currentCount <= 0) {\n      setIframeUrl('https://www.catapultsgame.com/app/')\n      clearInterval(countdownTimer.current)\n    }\n  }, [currentCount])\n\n  return (\n    <div className=\"container\">\n      <h1>IFrame Detail</h1>\n      <p>Tests an inner iFrame. This is a typical use case for \"wrapping\" an existing app in a MicroApp.</p>\n      <div className=\"example-block\">\n        <p>Showing iFrame in {currentCount}s</p>\n        <iframe style={{ width: '100%', borderWidth: 1 }} title=\"Example Iframe\" src={iframeUrl} />\n      </div>\n    </div>\n  )\n}\n\nexport default Detail\n","import React, { useRef, useEffect } from 'react'\nimport MicroApp from '@workgrid/micro-app'\nimport './detail.css'\nimport Tests from '../components/Tests'\n\nconst Detail = () => {\n  const microapp = useRef(new MicroApp({}))\n\n  useEffect(() => {\n    microapp.current.initialize()\n  }, [])\n\n  return (\n    <div className=\"container\">\n      <h1>Tests Detail</h1>\n      <div className=\"example-block\">\n        <Tests microapp={microapp.current} panel=\"detail\" />\n      </div>\n\n      <div className=\"example-block\">\n        <a href=\"./test-internal.html\">Internal Link</a>\n        <a href=\"https://www.bing.com?q=external\" target=\"_blank\" rel=\"noopener noreferrer\">\n          External Link\n        </a>\n        <a href=\"tel:1-562-867-5309\">Tel Link</a>\n        <a href=\"mailto:support@workgrid.com\">Mailto Link</a>\n      </div>\n    </div>\n  )\n}\n\nexport default Detail\n","import React from 'react'\nimport { HashRouter as Router, Route } from 'react-router-dom'\n\nimport Summary from './pages/Summary'\nimport IFrameDetail from './pages/IFrameDetail'\nimport TestDetail from './pages/TestDetail'\n\nconst App = () => {\n  return (\n    <Router basename={window.location.pathname}>\n      <Route path=\"/\" exact component={Summary} />\n      <Route path=\"/tests\" component={TestDetail} />\n      <Route path=\"/iframe\" component={IFrameDetail} />\n    </Router>\n  )\n}\n\nexport default App\n","import 'react-app-polyfill/ie11'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}